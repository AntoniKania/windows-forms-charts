<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChartControls</name>
    </assembly>
    <members>
        <member name="T:ChartControls.ChartItem">
            <summary>
            图表数据项。它是其他类型数据项的基类。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItem.Value">
            <summary>
            主要值。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItem.ValueChange">
            <summary>
            主要值较上一图表数据项的主要值的变动。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItem.Date">
            <summary>
            主要值的时间。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItem.ExtraData">
            <summary>
            额外数据。 <see cref="P:ChartControls.ChartItem.ExtraData"/>
            </summary>
        </member>
        <member name="T:ChartControls.ChartItemComparer">
            <summary>
            图表数据项比较器，通过时间比较。
            </summary>
        </member>
        <member name="T:ChartControls.ExtraData">
            <summary>
            额外数据字典，可以用存储分红，除权数据等等。
            </summary>
        </member>
        <member name="M:ChartControls.ExtraData.Add(System.String,System.Object)">
            <summary>
            添加额外数据项。
            </summary>
        </member>
        <member name="M:ChartControls.ExtraData.Get(System.String)">
            <summary>
            删除额外数据项。
            </summary>
        </member>
        <member name="T:ChartControls.ChartItemWrap">
            <summary>
            图表数据包装，被用于交互事件中。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemWrap.ChartItem">
            <summary>
            图表数据项。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemWrap.Point">
            <summary>
            交互位置，比如鼠标位置，触碰位置。
            </summary>
        </member>
        <member name="T:ChartControls.Scale`1">
            <summary>
            刻度。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ChartControls.Scale`1.#ctor(System.Double,`0)">
            <summary>
            构造函数。
            </summary>
            <param name="pos">刻度位置。</param>
            <param name="value">刻度值。</param>
        </member>
        <member name="P:ChartControls.Scale`1.Pos">
            <summary>
            刻度位置。
            </summary>
        </member>
        <member name="P:ChartControls.Scale`1.Value">
            <summary>
            刻度值。
            </summary>
        </member>
        <member name="P:ChartControls.Scale`1.AssistValue">
            <summary>
            辅助刻度值。
            </summary>
        </member>
        <member name="T:ChartControls.AddLocation">
            <summary>
            插入数据位置。
            </summary>
        </member>
        <member name="F:ChartControls.AddLocation.Head">
            <summary>
            头部。
            </summary>
        </member>
        <member name="F:ChartControls.AddLocation.Tail">
            <summary>
            尾部。
            </summary>
        </member>
        <member name="T:ChartControls.CollectionId">
            <summary>
            数据集合ID。
            </summary>
        </member>
        <member name="M:ChartControls.CollectionId.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="displayId">显示ID，如股票代码。</param>
            <param name="displayName">显示名字，如公司简称，或者指标名称。</param>
            <param name="marketId">市场ID。</param>
        </member>
        <member name="P:ChartControls.CollectionId.Id">
            <summary>
            ID。
            </summary>
        </member>
        <member name="P:ChartControls.CollectionId.DisplayId">
            <summary>
            显示ID，如股票代码。
            </summary>
        </member>
        <member name="P:ChartControls.CollectionId.MarketId">
            <summary>
            市场ID。
            </summary>
        </member>
        <member name="P:ChartControls.CollectionId.Name">
            <summary>
            显示名字，如公司简称，或者指标名称。
            </summary>
        </member>
        <member name="T:ChartControls.ChartItemCollection">
            <summary>
            图表数据集合，代表的图表是曲线。
            它是其他数据集合的基类。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.ValueName">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.ValueChangeName">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.ChartItem},ChartControls.Drawing.IPen,System.Windows.Media.Brush,System.Boolean,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="id">数据集合ID。</param>
            <param name="items">数据项列表。</param>
            <param name="pen">画笔，通过画图工厂创建。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"/></param>
            <param name="fill">填充画刷</param>
            <param name="isItemConnected">数据集合中点之间的连接线是否需要绘制。缺省值是true，表示绘制。</param>
            <param name="isItemDynamic">是否动态加载数据集合中的数据项。缺省值是false，表示不动态加载。</param>
        </member>
        <member name="F:ChartControls.ChartItemCollection.valueNA">
            <summary>
            未定义值。如果数据集合中任何未定义的数据，请务必值此赋值。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.Id">
            <summary>
            数据集合Id。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.Pen">
            <summary>
            画笔。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.Fill">
            <summary>
            填充颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.Items">
            <summary>
            数据项列表。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.IsItemsConnected">
            <summary>
            数据集合中点之间的连接线是否需要绘制。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.ItemXSpan">
            <summary>
            数据项的间距。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.MaxItemXDistance">
            <summary>
            数据项的最大宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.MinItemXDistance">
            <summary>
            数据项的最小宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.ItemXDistance">
            <summary>
            数据项的宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.ItemYDistance">
            <summary>
            Y轴方向每个单位的距离。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.FirstVisibleItemIndex">
            <summary>
            第一个可见的数据项的索引。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.VisiableItemCount">
            <summary>
            可见数据项的数目。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.MaxVisiableItemIndexDiff">
            <summary>
            可见数据项集合中最大值的索引减去第一个可见的数据项的索引。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.MinVisiableItemIndexDiff">
            <summary>
            可见数据项集合中最小值的索引减去第一个可见的数据项的索引。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.ChartRegion">
            <summary>
            数据集合的可见区域。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.FixedVisibleCount">
            <summary>
            设置固定数目的可见项。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.IsScalesOptimized">
            <summary>
            刻度划分是否是取整的。缺省是true，表示是取整的。false，表示是刻度平均分配的。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.YColumnCount">
            <summary>
            Y轴刻度数量。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.XColumnCount">
            <summary>
            X轴刻度数量，缺省值是4。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetDate(System.Int32)">
            <summary>
            取得索引位置上的数据项时间
            </summary>
            <param name="index">数据集合索引</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetItemValue(System.Int32,System.String)">
            <summary>
            取数据项中某值。
            </summary>
            <param name="index">索引。</param>
            <param name="valueName">值的名称。</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetItemPositionY(System.Int32,System.String)">
            <summary>
            取数据项中某值的Y坐标。
            </summary>
            <param name="index">索引。</param>
            <param name="valueName">值的名称。<see cref="F:ChartControls.ChartItemCollection.ValueName"/> <see cref="F:ChartControls.ChartItemCollection.ValueChangeName"/></param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetItemPositionX(System.Int32,System.String)">
            <summary>
            取数据项中某值的X坐标。
            </summary>
            <param name="index">索引。</param>
            <param name="valueName">值的名称。</param>
            <returns></returns>
        </member>
        <member name="F:ChartControls.ChartItemCollection.iStartPosition">
            <summary>
            第一个可见项的索引。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.originalPointLength">
            <summary>
            最初的可见项数目。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.points">
            <summary>
            可见项集合的坐标数组。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.iCurrentPosition">
            <summary>
            当前项的索引。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.iMinPosition">
            <summary>
            可见项集合中最小值的索引。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.iMaxPosition">
            <summary>
            可见项集合中最大值的索引。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.collectRect">
            <summary>
            数据集合的可见区域。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.masterCollection">
            <summary>
            本集合从属的图表数据集合。
            </summary>
        </member>
        <member name="F:ChartControls.ChartItemCollection.coordinateType">
            <summary>
            坐标类型 <see cref="T:ChartControls.CoordinateType"/>
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CalculatePosition(System.Windows.Rect)">
            <summary>
            计算可见集合及它们的位置信息。在重绘前被调用。
            如果需要重新定义计算方法，可以重载此函数。但是通常只需要重载被该方法调用的子方法即可，如果仍无法满足，再考虑重载。
            </summary>
            <param name="rect">可见区域</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CalculteCollectionPointsX">
            <summary>
            计算可见集合项的X坐标集合，填充<see cref="F:ChartControls.ChartItemCollection.points"/>数组的X坐标。
            <see cref="M:ChartControls.ChartItemCollection.CalculatePosition(System.Windows.Rect)"/>会调用此函数。
            如果数据项有更多X坐标需要计算，可重载此函数。      
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.FindMaxAndMinIndex">
            <summary>
            寻找可见项集合中最大最小值的索引，设置<see cref="F:ChartControls.ChartItemCollection.iMaxPosition"/>和<see cref="F:ChartControls.ChartItemCollection.iMinPosition"/>。
            <see cref="M:ChartControls.ChartItemCollection.CalculatePosition(System.Windows.Rect)"/>会调用此函数。
            如果数据项中有更多数据用于最大最小值比较，可重载此函数。 
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CalculateYDistance">
            <summary>
            计算Y轴方向上每个单位的距离，设置<see cref="P:ChartControls.ChartItemCollection.ItemYDistance"/>。
            <see cref="M:ChartControls.ChartItemCollection.CalculatePosition(System.Windows.Rect)"/>会调用此函数。
            有需要，可重载此函数。 
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CalculateCollectionPoints">
            <summary>
            计算可见集合项的Y坐标集合，填充<see cref="F:ChartControls.ChartItemCollection.points"/>数组的Y坐标。
            <see cref="M:ChartControls.ChartItemCollection.CalculatePosition(System.Windows.Rect)"/>会调用此函数。
            如有更多Y坐标有需要计算，可重载此函数。      
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetMaxValue">
            <summary>
            取最大值。
            有需要，可重载此函数。
            </summary>
            <returns>最大值。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetMinValue">
            <summary>
            取最小值。
            有需要，可重载此函数。
            </summary>
            <returns>最小值。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CopyFromMaster">
            <summary>
            复制主人集合的绘制参数，省得去自己计算。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.DrawDenseChart(ChartControls.Drawing.IDrawingContext,System.Windows.Point[],ChartControls.Drawing.IPen)">
            <summary>
            数据项间距小于1时，调用绘制。
            </summary>
            <param name="dc">绘制上下文。<see cref="T:ChartControls.Drawing.IDrawingContext"/></param>
            <param name="pointArray">可见项坐标数组。</param>
            <param name="pen">画笔。<see cref="T:ChartControls.Drawing.IPen"/></param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.DrawLooseChart(ChartControls.Drawing.IDrawingContext,System.Windows.Point[],ChartControls.Drawing.IPen)">
            <summary>
            数据项间距大于等于1时，调用绘制。
            </summary>
            <param name="dc">绘制上下文。<see cref="T:ChartControls.Drawing.IDrawingContext"/></param>
            <param name="pointArray">可见项坐标数组。</param>
            <param name="pen">画笔。<see cref="T:ChartControls.Drawing.IPen"/></param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.Draw(ChartControls.Drawing.IDrawingContext)">
            <summary>
            绘制数据集合图形。
            如需绘制曲线以外样式的图形，可重载。
            </summary>
            <param name="dc">绘制上下文</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.LocateCurrentChartItem(System.Windows.Point)">
            <summary>
            依据坐标查找当前数据项。
            </summary>
            <param name="pt">坐标。</param>
            <returns>数据项包装。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CreateChartItemWrap(System.Int32)">
            <summary>
            创建数据项包装。
            </summary>
            <param name="iPoint">数据项索引。</param>
            <returns>数据项包装</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.LocateNearItem(System.Int32)">
            <summary>
            改变当前数据项。
            </summary>
            <param name="steps">向左向右单位移动的单位。</param>
            <returns></returns>
        </member>
        <member name="P:ChartControls.ChartItemCollection.CurrentItem">
            <summary>
            取当前数据项包装。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.AdjustPoint(System.Windows.Point,System.Boolean)">
            <summary>
            微调坐标位置。
            </summary>
            <param name="pt">坐标点。</param>
            <param name="isMinY">检查是否是最低点。</param>
            <returns>调整后的坐标。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.Move(System.Int32,ChartControls.QueryData@)">
            <summary>
            调整数据可见项集合。
            </summary>
            <param name="steps">正数向右调整，负数向左调整。</param>
            <param name="queryData">如果调整到现有数据集合的末端，请求额外数据。数据集合中的数据是动态请求的，参见构造函数参数isItemDynamic。</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.Zoom(System.Double,ChartControls.QueryData@,System.Boolean)">
            <summary>
            放大或者缩小可见数据集合。
            </summary>
            <param name="times">放大或者缩小倍速。</param>
            <param name="qData">如果调整到现有数据集合的末端，请求额外数据。数据集合中的数据是动态请求的，参见构造函数参数isItemDynamic。</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.RearrayPointCollection(System.Int32)">
            <summary>
            重新分配可见数据坐标数组。
            如需分配更多数据，可重载此函数。
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.Resize(System.Windows.Size)">
            <summary>
            调整数据集合显示区域。
            </summary>
            <param name="newSize">新区域的大小</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ShowRegion(System.Windows.Point,System.Windows.Point)">
            <summary>
            显示一定区域内的数据项列表。
            </summary>
            <param name="startPt">起始点。</param>
            <param name="endPt">终止点。</param>
            <returns>是否成功显示。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetChartItems(System.Windows.Point,System.Windows.Point)">
            <summary>
            取可见项列表中，一定区域内的数据项列表。
            </summary>
            <param name="startPt">起始点。</param>
            <param name="endPt">终止点。</param>
            <returns>数据项列表。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.IsPointValid(System.Windows.Point)">
            <summary>
            坐标点是否可用。等于<see cref="F:ChartControls.ChartItemCollection.valueNA"/>表示不可用。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.IsItemValid(ChartControls.ChartItem)">
            <summary>
            判读数据项是否可用。等于空表示不可用。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.IsValueValid(System.Double)">
            <summary>
            判读值是否可用。等于<see cref="F:ChartControls.ChartItemCollection.valueNA"/>表示不可用。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.AssistTo(ChartControls.ChartItemCollection,System.Boolean)">
            <summary>
            设置本集合要辅助的集合。
            </summary>
            <param name="source">需要辅助数据集合。</param>
            <param name="isIndependent">本集合坐标计算是否独立，缺省值是false，表示不独立计算。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetValueFromPosition(System.Double)">
            <summary>
            y坐标转换数据值。
            </summary>
            <param name="y">y坐标。</param>
            <returns>数据值。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetStartValue">
            <summary>
            取第一个可见项的值。
            </summary>
            <returns>可见项的值<see cref="P:ChartControls.ChartItem.Value"/></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetYScaleDiffValue">
            <summary>
            取百分比坐标单位值。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)">
            <summary>
            计算Y轴的刻度列表。
            </summary>
            <param name="coordinateType">坐标类型<see cref="T:ChartControls.CoordinateType"/></param>
            <returns>Y轴的刻度列表。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetXAxisScales">
            <summary>
            取得X轴的刻度列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CalculateItemWidth(System.Double)">
            <summary>
            依据请求宽度，计算合理的数据项宽度。
            </summary>
            <param name="itemWidth">请求宽度。</param>
            <returns>合理的数据项宽度。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.GetContainsCount">
            <summary>
            计算可见项数目。
            </summary>
            <returns>可见项数目</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ConvertFrom(ChartControls.QueryItem)">
            <summary>
            请求结果项转换为数据项。
            </summary>
            <param name="queryItem">请求项。<see cref="T:ChartControls.QueryItem"/></param>
            <returns>数据结果项。<see cref="T:ChartControls.ChartItem"/></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.AddChartItems(System.Collections.Generic.IList{ChartControls.ChartItem},ChartControls.AddLocation,System.Boolean)">
            <summary>
            插入数据项集合。动态请求发出后，需要条用此函数插入请求结果。
            <see cref="T:ChartControls.QueryData"/>
            <see cref="M:ChartControls.ChartItemCollection.Move(System.Int32,ChartControls.QueryData@)"/>
            <see cref="M:ChartControls.ChartItemCollection.Zoom(System.Double,ChartControls.QueryData@,System.Boolean)"/>
            </summary>
            <param name="items">数据项集合。</param>
            <param name="location">插入位置。</param>
            <param name="isEnd">是否还有更多数据可以请求。false表示，向左或者向右方向上已经到头。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.UpdateConnectedItem(ChartControls.ChartItem,ChartControls.ChartItem)">
            <summary>
            设置数据项中的变动项<see cref="P:ChartControls.ChartItem.ValueChange"/>。
            如果需要计算更多变动项，可以重载。
            </summary>
            <param name="connectItem">数据项。</param>
            <param name="preItem">前一个数据项。</param>
        </member>
        <member name="P:ChartControls.ChartItemCollection.IsEmpty">
            <summary>
            数据集合是否为空。
            </summary>
        </member>
        <member name="P:ChartControls.ChartItemCollection.Count">
            <summary>
            数据集合中数据项的数量。
            </summary>
        </member>
        <member name="M:ChartControls.ChartItemCollection.TransferCoordinate(ChartControls.CoordinateType)">
            <summary>
            根据坐标类型，转换数据项集合中所有数据。
            </summary>
            <param name="coordinateTypeTo">坐标类型<see cref="T:ChartControls.CoordinateType"/>。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ConvertChartItemLog10(ChartControls.ChartItem)">
            <summary>
            转换数据项的值，Log10(X)。
            </summary>
            <param name="item">数据项<see cref="T:ChartControls.ChartItem"/>。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ConvertChartItemPow10(ChartControls.ChartItem)">
            <summary>
            转换数据项的值，Pow10(X)。
            </summary>
            <param name="item">数据项<see cref="T:ChartControls.ChartItem"/>。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.AdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType,ChartControls.CoordinateType)">
            <summary>
            根据坐标类型转换数据项的值。
            </summary>
            <param name="item">数据项<see cref="T:ChartControls.ChartItem"/>。</param>
            <param name="coordinateTypeFrom">源坐标类型<see cref="T:ChartControls.CoordinateType"/>。</param>
            <param name="coordinateTypeTo">目标坐标类型<see cref="T:ChartControls.CoordinateType"/>。</param>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)">
            <summary>
            复制数据项并且根据坐标类型转换它的值。
            </summary>
            <param name="item">数据项<see cref="T:ChartControls.ChartItem"/>。</param>
            <param name="coordinateType">坐标类型<see cref="T:ChartControls.CoordinateType"/>。</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ConvertFromPoint(System.Windows.Point)">
            <summary>
            坐标点转化为时间和值的组合。
            </summary>
            <param name="pt">坐标。</param>
            <returns>时间和值的组合。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.ConvertFromValuePoint(ChartControls.ValuePoint)">
            <summary>
            时间和值的组合转化为坐标。
            </summary>
            <param name="vp">时间和值。</param>
            <returns>坐标</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.CopyPen(ChartControls.Drawing.IPen,System.Windows.Media.PenLineCap)">
            <summary>
            复制画笔。
            </summary>
            <param name="pen">源。</param>
            <param name="lineCap">线头形状。</param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.AddLatestChartItem(ChartControls.ChartItem)">
            <summary>
            添加最新数据
            </summary>
            <param name="latestItem">数据项</param>
            <returns>是否添加成功。</returns>
        </member>
        <member name="M:ChartControls.ChartItemCollection.UpdateLatestChartItem(ChartControls.ChartItem)">
            <summary>
            更新最新数据。
            </summary>
            <param name="latestItem">数据项</param>
            <returns>是否更新成功。</returns>
        </member>
        <member name="T:ChartControls.ChartControl">
             <summary>
             股票图表控件。
             显示股票K线图，分时图，成交量图及技术指标图。
             </summary>
             <remarks>
             
             </remarks>
             <example>
             1.创建K线图。
             Xaml
             &lt;local:ChartControl x:Name="price"/&gt;
             <code>
             Stock stock = ...;
             var closeList = new List&lt;ChartItem&gt;();
             CandleData cdPre = stock.Items.First();
             foreach (var cd in stock.Items)
             {
                 closeList.Add(new StockItem()
                 {
                     Close = cd.close,
                     Date = cd.DateTime,
                     High = cd.high,
                     Low = cd.low,
                     Open = cd.open,
                     CloseChange = (cd.close - cdPre.close) / cdPre.close
                 });
                 cdPre = cd;
             }
            
             CollectionId id = new CollectionId("000001", "SH");
             StockItemCollection coll = new StockItemCollection(id, closeList, raisePen, fallPen, null, false);
             price.SetMainCollection(coll);
             price.ForceDraw();
             </code>
             
             2.创建K线图及成交量图。
             Xaml
             &lt;local:ChartControl x:Name="price"/&gt;
             &lt;local:ChartControl x:Name="volumn" /&gt;
             <code>
             Stock stock = ...;
            
            var closeList = new List&lt;ChartItem&gt;();
            var volList = new List&lt;ChartItem&gt;();
            CandleData cdPre = stock.Items.First();
            foreach (var cd in stock.Items)
            {
                closeList.Add(new StockItem()
                {
                    Close = cd.close,
                    Date = cd.DateTime,
                    High = cd.high,
                    Low = cd.low,
                    Open = cd.open,
                    CloseChange = (cd.close - cdPre.close) / cdPre.close
                });
                cdPre = cd;
            
                volList.Add(new VolumnItem()
                {
                    Date = cd.DateTime,
                    IsRaise = cd.open &lt;= cd.close,
                    Volumn = cd.amount,
                    Turnover = cd.money
                });
            }
            
            string stockId = "000001";
            string marketId = "SH";
            CollectionId id = new CollectionId(stockId, marketId);
            StockItemCollection coll = new StockItemCollection(id, closeList, raisePen, fallPen, null, false);
            price.SetMainCollection(coll);
            
            id = new CollectionId(stockId, marketId);
            VolumnItemCollection volColl = new VolumnItemCollection(id, volList, raisePen, fallPen, false);
            volumn.SetMainCollection(volColl);
            price.AddConnection(volumn);
            price.ForceDraw();
             </code>
             </example>
             
        </member>
        <member name="M:ChartControls.ChartControl.#ctor">
            <summary>
            构造函数，初始化控件。
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.SetMainCollection(ChartControls.ChartItemCollection,System.Boolean)">
            <summary>
            设置主要数据集合，比如k线图数据集合。
            </summary>
            <param name="collection">图表数据集合。</param>
            <param name="needDraw">设置主数据后是否绘制。缺省值是false，表示不绘制，需要自行调用ForceDraw。</param>
        </member>
        <member name="M:ChartControls.ChartControl.AddAssistCollection(ChartControls.ChartItemCollection,System.Boolean,System.Boolean)">
            <summary>
            设置辅助数据集合，比如K线图的均线数据集合，或者其他指标数据集合。
            </summary>
            <param name="collection">图表数据集合。</param>
            <param name="isIndependent">辅助数据集合显示位置是否是独立计算的。缺省值是false，表示辅助数据集合显示位置不是独立计算，而是通过根据主要数据集合计算。</param>
            <param name="needDraw"></param>
        </member>
        <member name="M:ChartControls.ChartControl.AddExtraDataGraphic(ChartControls.IExtraDataGraphics)">
            <summary>
            添加额外数据绘制接口， 比如除权数据、分红数据、消息。
            </summary>
            <param name="graphic"><see cref="T:ChartControls.IExtraDataGraphics"/></param>
        </member>
        <member name="M:ChartControls.ChartControl.RemoveExtraDataGraphic(ChartControls.IExtraDataGraphics)">
            <summary>
            移除额外数据绘制接口。
            </summary>
            <param name="graphic"><see cref="T:ChartControls.IExtraDataGraphics"/></param>
        </member>
        <member name="M:ChartControls.ChartControl.ForceDraw(System.Boolean,System.Boolean)">
            <summary>
            强制重画控件。
            </summary>
            <param name="needResizeLayout">是否需要重新计算大小，缺省值是false，不需要重新计算。</param>
            <param name="needRemoveCursor">是否需要删除光标线。缺省值是true， 表示需要删除光标线。</param>
        </member>
        <member name="M:ChartControls.ChartControl.StartDrawCustomGraphics(ChartControls.ICustomGraphics)">
            <summary>
            开始绘制自定义图形，比如直线，平行线等等。用户可以通过鼠标选择图形位置。
            </summary>
            <param name="g"><see cref="T:ChartControls.ICustomGraphics"/></param>
        </member>
        <member name="M:ChartControls.ChartControl.StopDrawCustomGraphics">
            <summary>
            结束绘制自定义图形。
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.StartRemoveCustomGraphics">
            <summary>
            开始删除自定义图形。用户可以通过鼠标选择删除图形。
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.StopRemoveCustomGraphics">
            <summary>
            结束删除自定义图形。
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.AddConnection(ChartControls.ChartControl)">
            <summary>
            关联另一个图表控件。关联后的几个控件鼠标移动，放大缩小会联动起来。
            </summary>
            <param name="otherChart"></param>
        </member>
        <member name="P:ChartControls.ChartControl.MainCollection">
            <summary>
            主要数据集合
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.AssistCollections">
            <summary>
            辅助数据集合列表
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.SetCursorPosition(System.Windows.Point)">
            <summary>
            设置光标位置
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:ChartControls.ChartControl.MoveCursorPosition(System.Int32)">
            <summary>
            移动光标
            </summary>
            <param name="steps">正值表示向右移动的单位，负值向左移动的单位。</param>
        </member>
        <member name="M:ChartControls.ChartControl.MoveChartPosition(System.Int32)">
            <summary>
            移动图表
            </summary>
            <param name="steps">正值表示向右移动的单位，负值向左移动的单位。</param>
        </member>
        <member name="M:ChartControls.ChartControl.Zoom(System.Double,System.Boolean)">
            <summary>
            放大或者缩小图表。
            </summary>
            <param name="times">当前图表的倍数，大于1表示放大。大于0小于1表示缩小。</param>
            <param name="autoAdjust">如果倍数过小，放大缩小失败，是否自动调整。缺省值是True，自动调整倍数。</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ChartControls.ChartControl.DisplayRegion(System.Windows.Point,System.Windows.Point)">
            <summary>
            显示两个点之间的数据集合，等于放大显示。
            </summary>
            <param name="start">起始点</param>
            <param name="end">结束点</param>
        </member>
        <member name="M:ChartControls.ChartControl.FindCollection(ChartControls.CollectionId)">
            <summary>
            查找数据集合。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.IsIteractive">
            <summary>
            是否相应交互事件，比如鼠标，触摸及键盘输入。
            </summary>
        </member>
        <member name="M:ChartControls.ChartControl.QueryFinished(ChartControls.QueryDataResult{ChartControls.ChartItem})">
            <summary>
            响应请求结果。
            </summary>
            <param name="result">请求结果</param>
        </member>
        <member name="F:ChartControls.ChartControl.BackgroundProperty">
            <summary>
            背景颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.BorderProperty">
            <summary>
            边框颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.BorderThicknessProperty">
            <summary>
            边框宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.CursorLinesProperty">
            <summary>
            光标线颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.CursorLinesThicknessProperty">
            <summary>
            光标线宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.CursorLinesDashesProperty">
            <summary>
            光标线Dash样式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleDockProperty">
            <summary>
            y轴刻度位置。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleWidthProperty">
            <summary>
            y轴刻度宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleDockProperty">
            <summary>
            x轴刻度位置。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleHeightProperty">
            <summary>
            x轴刻度高度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.SelectionBorderColorProperty">
            <summary>
            选择框颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.SelectionBorderThicknessProperty">
            <summary>
            选择框宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.SelectionBorderDashesProperty">
            <summary>
            选择框Dash样式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleFormatProperty">
            <summary>
            x轴刻度显示格式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleFormatProperty">
            <summary>
            y轴刻度显示格式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YCursorFormatProperty">
            <summary>
            y轴游标显示格式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleLineColorProperty">
            <summary>
            y轴刻度线颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleLineThicknessProperty">
            <summary>
            y轴刻度线宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YScaleLineDashesProperty">
            <summary>
            y轴刻度线Dash样式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleLineColorProperty">
            <summary>
            x轴刻度线颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleLineThicknessProperty">
            <summary>
            x轴刻度线宽度。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XScaleLineDashesProperty">
            <summary>
            x轴刻度线Dash样式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.FontFamilyProperty">
            <summary>
            字体族。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.FontSizeProperty">
            <summary>
            字体大小。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.FontStretchProperty">
            <summary>
            字体拉伸和压缩。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.FontStyleProperty">
            <summary>
            字体样式。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.FontWeightProperty">
            <summary>
            字体粗细。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.ForegroundProperty">
            <summary>
            前景颜色。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.PointerStartActionProperty">
            <summary>
            接触开始事件。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.CoordinateTypeProperty">
            <summary>
            坐标类型。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.MeasureGraphicsProperty">
            <summary>
            测量用尺图形。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.IsScalesOptimizedProperty">
            <summary>
            刻度划分是否是取整的。缺省是true，表示是取整的。false，表示是刻度平均分配的。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.YColumnCountProperty">
            <summary>
            Y轴刻度数量，缺省值是4。
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.XColumnCountProperty">
            <summary>
            X轴刻度数量，缺省值是4。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.Background">
            <summary>
            背景颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.Border">
            <summary>
            边框颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.BorderThickness">
            <summary>
            边框宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.CursorLines">
            <summary>
            光标线颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.CursorLinesThickness">
            <summary>
            光标线宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.CursorLinesDashes">
            <summary>
            光标线Dash样式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleDock">
            <summary>
            y轴刻度位置。<see cref="T:ChartControls.YScaleDock"/>
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleWidth">
            <summary>
            y轴刻度宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleDock">
            <summary>
            x轴刻度位置。<see cref="T:ChartControls.XScaleDock"/>
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleHeight">
            <summary>
            x轴刻度高度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.SelectionBorderColor">
            <summary>
            选择框颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.SelectionBorderThickness">
            <summary>
            选择框宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.SelectionBorderDashes">
            <summary>
            选择框Dash样式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleFormat">
            <summary>
            x轴刻度显示格式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleFormat">
            <summary>
            y轴刻度显示格式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YCursorFormat">
            <summary>
            y轴游标显示格式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleLineColor">
            <summary>
            y轴刻度线颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleLineThickness">
            <summary>
            y轴刻度线宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YScaleLineDashes">
            <summary>
            y轴刻度线Dash样式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleLineColor">
            <summary>
            x轴刻度线颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleLineThickness">
            <summary>
            x轴刻度线宽度。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XScaleLineDashes">
            <summary>
            x轴刻度线Dash样式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.FontFamily">
            <summary>
            字体族。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.FontSize">
            <summary>
            字体大小。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.FontStretch">
            <summary>
            字体拉伸和压缩。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.FontStyle">
            <summary>
            字体样式。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.FontWeight">
            <summary>
            字体粗细。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.Foreground">
            <summary>
            前景颜色。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.PointerStartAction">
            <summary>
            接触开始事件。<see cref="T:ChartControls.PointerAction"/>
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.CoordinateType">
            <summary>
            坐标类型。<see cref="T:ChartControls.CoordinateType"/>
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.MeasureGraphics">
            <summary>
            测量用尺图形。<see cref="T:ChartControls.MeasureGraphics"/>
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.IsScalesOptimized">
            <summary>
            刻度划分是否是取整的。缺省是true，表示是取整的。false，表示是刻度平均分配的。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.YColumnCount">
            <summary>
            Y轴刻度数量，缺省值是4。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.XColumnCount">
            <summary>
            X轴刻度数量，缺省值是4。
            </summary>
        </member>
        <member name="P:ChartControls.ChartControl.ExtraDataGraphics">
            <summary>
            额外数据列表。<see cref="T:ChartControls.IExtraDataGraphics"/>
            </summary>
        </member>
        <member name="T:ChartControls.ChartControl.CursorMovedEventHandler">
            <summary>
            光标移动事件处理函数。<see cref="T:ChartControls.CursorMovedRoutedEventArgs"/>
            </summary>
        </member>
        <member name="T:ChartControls.ChartControl.DataQueriedEventHandler">
            <summary>
            动态数据请求事件。 <see cref="T:ChartControls.QueryDataEventArgs"/>
            </summary>
        </member>
        <member name="T:ChartControls.ChartControl.SelectItemsEventHandler">
            <summary>
            选择事件处理函数。<see cref="T:ChartControls.SelectItemsEventArgs"/>
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.CursorMovedEvent">
            <summary>
            光标移动事件。<see cref="T:ChartControls.CursorMovedRoutedEventArgs"/>
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.DataQueriedEvent">
            <summary>
            动态数据请求事件处理函数。 <see cref="T:ChartControls.QueryDataEventArgs"/>
            </summary>
        </member>
        <member name="F:ChartControls.ChartControl.SelectItemsEvent">
            <summary>
            选择事件。<see cref="T:ChartControls.SelectItemsEventArgs"/>
            </summary>
        </member>
        <member name="E:ChartControls.ChartControl.CursorMoved">
            <summary>
            光标移动事件。<see cref="T:ChartControls.CursorMovedRoutedEventArgs"/>
            </summary>
        </member>
        <member name="E:ChartControls.ChartControl.DataQueried">
            <summary>
            动态数据请求事件。 <see cref="T:ChartControls.QueryDataEventArgs"/>
            </summary>
        </member>
        <member name="E:ChartControls.ChartControl.SelectItems">
            <summary>
            选择事件。<see cref="T:ChartControls.SelectItemsEventArgs"/>
            </summary>
        </member>
        <member name="T:ChartControls.CurrentChartItem">
            <summary>
            当前位置下的图表数据项。通常用于返回位于鼠标下的图表数据项。
            </summary>
        </member>
        <member name="M:ChartControls.CurrentChartItem.#ctor(ChartControls.CollectionId,ChartControls.ChartItem)">
            <summary>
            构造函数
            </summary>
            <param name="id">图表数据集合的ID</param>
            <param name="item">图表数据项</param>
        </member>
        <member name="P:ChartControls.CurrentChartItem.Id">
            <summary>
            图表数据集合的ID
            </summary>
        </member>
        <member name="P:ChartControls.CurrentChartItem.Item">
            <summary>
            图表数据项
            </summary>
        </member>
        <member name="T:ChartControls.CursorMovedRoutedEventArgs">
            <summary>
            光标移动事件参数。
            </summary>
        </member>
        <member name="M:ChartControls.CursorMovedRoutedEventArgs.#ctor(System.Collections.Generic.IEnumerable{ChartControls.CurrentChartItem})">
            <summary>
            构造函数。
            </summary>
            <param name="currentItems">数据项列表。<see cref="T:ChartControls.CurrentChartItem"/></param>
        </member>
        <member name="P:ChartControls.CursorMovedRoutedEventArgs.CurrentItems">
            <summary>
            相关数据项列表。<see cref="T:ChartControls.CurrentChartItem"/>
            </summary>
        </member>
        <member name="T:ChartControls.QueryDataEventArgs">
            <summary>
            动态数据请求事件参数。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataEventArgs.QueryData">
            <summary>
            请求数据。<see cref="T:ChartControls.QueryData"/>
            </summary>
        </member>
        <member name="T:ChartControls.SelectItemsEventArgs">
            <summary>
            选择事件参数。
            </summary>
        </member>
        <member name="P:ChartControls.SelectItemsEventArgs.Items">
            <summary>
            选择的数据项列表。<see cref="T:ChartControls.ChartItem"/>
            </summary>
        </member>
        <member name="T:ChartControls.YScaleDock">
            <summary>
            y轴刻度位置。
            </summary>
        </member>
        <member name="F:ChartControls.YScaleDock.Left">
            <summary>
            图表左侧。
            </summary>
        </member>
        <member name="F:ChartControls.YScaleDock.Right">
            <summary>
            图表右侧。
            </summary>
        </member>
        <member name="F:ChartControls.YScaleDock.InnerLeft">
            <summary>
            图表左内侧。
            </summary>
        </member>
        <member name="F:ChartControls.YScaleDock.InnerRight">
            <summary>
            图表右内侧。
            </summary>
        </member>
        <member name="F:ChartControls.YScaleDock.None">
            <summary>
            不显示。
            </summary>
        </member>
        <member name="T:ChartControls.XScaleDock">
            <summary>
            x轴刻度位置。
            </summary>
        </member>
        <member name="F:ChartControls.XScaleDock.None">
            <summary>
            不显示。
            </summary>
        </member>
        <member name="F:ChartControls.XScaleDock.Bottom">
            <summary>
            底部。
            </summary>
        </member>
        <member name="T:ChartControls.CoordinateType">
            <summary>
            坐标类型。
            </summary>
        </member>
        <member name="F:ChartControls.CoordinateType.Linear">
            <summary>
            线性坐标。
            </summary>
        </member>
        <member name="F:ChartControls.CoordinateType.Log10">
            <summary>
            对数坐标。
            </summary>
        </member>
        <member name="F:ChartControls.CoordinateType.Percentage">
            <summary>
            百分比坐标。
            </summary>
        </member>
        <member name="T:ChartControls.PointerAction">
            <summary>
            接触操作类型。
            </summary>
        </member>
        <member name="F:ChartControls.PointerAction.None">
            <summary>
            无。
            </summary>
        </member>
        <member name="F:ChartControls.PointerAction.ZoomIn">
            <summary>
            放大。
            </summary>
        </member>
        <member name="F:ChartControls.PointerAction.Measure">
            <summary>
            测量。
            </summary>
        </member>
        <member name="F:ChartControls.PointerAction.Select">
            <summary>
            选择。
            </summary>
        </member>
        <member name="T:ChartControls.ExtraDataNames">
            <summary>
            额外数据索引名字。
            </summary>
        </member>
        <member name="F:ChartControls.ExtraDataNames.XRName">
            <summary>
            除权及分红数据名字。
            </summary>
        </member>
        <member name="F:ChartControls.ExtraDataNames.MessageName">
            <summary>
            消息名字。
            </summary>
        </member>
        <member name="T:ChartControls.Drawing.DrawingObjectFactory">
            <summary>
            创建画图对象， 比如画笔、文本。在创建ChartItemCollection时需要用到。
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)">
            <summary>
            创建画笔。
            </summary>
            <param name="brush"></param>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:ChartControls.Drawing.DrawingObjectFactory.CreateTextFormat(System.String,System.Windows.FlowDirection,System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.FontStretch,System.Double,System.Windows.Media.Brush)">
            <summary>
            创建文本。
            </summary>
            <param name="textToFormat"></param>
            <param name="flowDirection"></param>
            <param name="fontFamily"></param>
            <param name="style"></param>
            <param name="weight"></param>
            <param name="stretch"></param>
            <param name="emSize"></param>
            <param name="foreground"></param>
            <returns></returns>
        </member>
        <member name="T:ChartControls.Drawing.IPen">
            <summary>
            画笔接口，属性定义与WPF的Pen类似
            </summary>
        </member>
        <member name="P:ChartControls.Drawing.IPen.LowObject">
            <summary>
            取得底层对象，如果依赖WPF，就返回Pen对象
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IPen.Clone">
            <summary>
            克隆对象
            </summary>
            <returns>画笔</returns>
        </member>
        <member name="T:ChartControls.Drawing.ITextFormat">
            <summary>
            文本接口, 属性定义与WPF的FormattedText类似
            </summary>
        </member>
        <member name="P:ChartControls.Drawing.ITextFormat.LowObject">
            <summary>
            取得底层对象，如果依赖WPF，就返回FormattedText对象
            </summary>
        </member>
        <member name="T:ChartControls.Drawing.IDrawingContext">
            <summary>
            画图上下文接口，提供画图函数。
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawEllipse(System.Windows.Media.Brush,ChartControls.Drawing.IPen,System.Windows.Point,System.Double,System.Double)">
            <summary>
            画椭圆
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawGeometry(System.Windows.Media.Brush,ChartControls.Drawing.IPen,System.Windows.Media.Geometry)">
            <summary>
            画自定义几何图形
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawImage(System.Windows.Media.ImageSource,System.Windows.Rect)">
            <summary>
            画图像
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawLine(ChartControls.Drawing.IPen,System.Windows.Point,System.Windows.Point)">
            <summary>
            画直线
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawRectangle(System.Windows.Media.Brush,ChartControls.Drawing.IPen,System.Windows.Rect)">
            <summary>
            画矩形
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawRoundedRectangle(System.Windows.Media.Brush,ChartControls.Drawing.IPen,System.Windows.Rect,System.Double,System.Double)">
            <summary>
            画圆角矩形
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.DrawText(ChartControls.Drawing.ITextFormat,System.Windows.Point)">
            <summary>
            画文本
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.Pop">
            <summary>
            弹出最后压入的效果
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.PushClip(System.Windows.Media.Geometry)">
            <summary>
            压入剪切区域
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.PushOpacity(System.Double)">
            <summary>
            压入透明值效果
            </summary>
        </member>
        <member name="M:ChartControls.Drawing.IDrawingContext.PushTransform(System.Windows.Media.Transform)">
            <summary>
            压入转换效果
            </summary>
        </member>
        <member name="P:ChartControls.Drawing.IDrawingContext.LowContext">
            <summary>
            取得底层上下文， 如果依赖WPF， 返回DrawingContext对象。否则返回Canvas对象
            </summary>
        </member>
        <member name="P:ChartControls.Drawing.IDrawingContext.LastDrawnObject">
            <summary>
            返回最后画的对象
            </summary>
        </member>
        <member name="T:ChartControls.IExtraDataGraphics">
            <summary>
            额外数据图形接口。<see cref="M:ChartControls.ChartControl.AddExtraDataGraphic(ChartControls.IExtraDataGraphics)"/>
            </summary>
        </member>
        <member name="M:ChartControls.IExtraDataGraphics.DrawExtraData(ChartControls.ChartControl,ChartControls.Drawing.IDrawingContext)">
            <summary>
            绘制自定义额外数据。
            </summary>
            <param name="chartSource">图形控件。</param>
            <param name="dc">绘制上下文。</param>
        </member>
        <member name="T:ChartControls.IInteractive">
            <summary>
            交互接口。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.HasTooltip">
            <summary>
            是否有提示内容。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.ToolTip">
            <summary>
            提示内容。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.ContextMenu">
            <summary>
            菜单。
            </summary>
        </member>
        <member name="M:ChartControls.IInteractive.IsPointInRegion(System.Windows.Point)">
            <summary>
            判断点是否在区域内。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.CanSelect">
            <summary>
            是否可以选择。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.IsSelected">
            <summary>
            选择。
            </summary>
        </member>
        <member name="P:ChartControls.IInteractive.CanChange">
            <summary>
            是否可以改变。
            </summary>
        </member>
        <member name="M:ChartControls.IInteractive.GetNodeIndex(System.Windows.Point)">
            <summary>
            取点所在的节点索引。
            </summary>
        </member>
        <member name="M:ChartControls.IInteractive.UpdateNodePosition(System.Int32,System.Windows.Point)">
            <summary>
            更新节点的坐标。
            </summary>
            <param name="nodeIndex">节点索引。</param>
            <param name="newPosition">新坐标。</param>
        </member>
        <member name="M:ChartControls.IInteractive.TranformPosition(System.Windows.Media.Transform)">
            <summary>
            转换图形。
            </summary>
            <param name="transform"></param>
        </member>
        <member name="T:ChartControls.LineGraphics">
            <summary>
            直线自定义图形。
            </summary>
        </member>
        <member name="T:ChartControls.MeasureGraphics">
            <summary>
            尺子
            </summary>
        </member>
        <member name="T:ChartControls.MultipleChartItem">
            <summary>
            多值数据项。
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItem.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:ChartControls.MultipleChartItem.Values">
            <summary>
            值列表。
            </summary>
        </member>
        <member name="P:ChartControls.MultipleChartItem.ValueChanges">
            <summary>
            值变动百分比列表。
            </summary>
        </member>
        <member name="T:ChartControls.MultipleChartItemWrap">
            <summary>
            多值数据项包装。
            </summary>
        </member>
        <member name="P:ChartControls.MultipleChartItemWrap.Points">
            <summary>
            坐标点数组。
            </summary>
        </member>
        <member name="T:ChartControls.MultipleChartItemCollection">
            <summary>
            多值数据项集合。
            </summary>
        </member>
        <member name="P:ChartControls.MultipleChartItemCollection.Pens">
            <summary>
            画笔数组，对应多值数据项的每个数据。
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.MultipleChartItem},ChartControls.Drawing.IPen[],System.Boolean,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="id">ID。</param>
            <param name="items">多值数据项列表。<see cref="T:ChartControls.MultipleChartItem"/></param>
            <param name="pens">画笔数组。<see cref="T:ChartControls.Drawing.IPen"/> <see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"/></param>
            <param name="isItemConnected">数据集合中点之间的连接线是否需要绘制。缺省值是true，表示绘制。</param>
            <param name="isItemDynamic">是否动态加载数据集合中的数据项。缺省值是false，表示不动态加载。</param>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CalculteCollectionPointsX">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CalculteCollectionPointsX"/>     
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.FindMaxAndMinIndex">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.FindMaxAndMinIndex"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CalculateYDistance">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CalculateYDistance"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CalculateCollectionPoints">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CalculateCollectionPoints"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetStartValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetStartValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetMaxValueRaw">
            <summary>
            获取最大值。
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetMaxValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMaxValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetMinValueRaw">
            <summary>
            获取最小值。
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetMinValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMinValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CopyFromMaster">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyFromMaster"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.RearrayPointCollection(System.Int32)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.RearrayPointCollection(System.Int32)"/>
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.Draw(ChartControls.Drawing.IDrawingContext)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.Draw(ChartControls.Drawing.IDrawingContext)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CreateChartItemWrap(System.Int32)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CreateChartItemWrap(System.Int32)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.UpdateConnectedItem(ChartControls.ChartItem,ChartControls.ChartItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.UpdateConnectedItem(ChartControls.ChartItem,ChartControls.ChartItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.ConvertChartItemLog10(ChartControls.ChartItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertChartItemLog10(ChartControls.ChartItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.ConvertChartItemPow10(ChartControls.ChartItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertChartItemPow10(ChartControls.ChartItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.ConvertFrom(ChartControls.QueryItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertFrom(ChartControls.QueryItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.MultipleChartItemCollection.GetYScaleDiffValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetYScaleDiffValue"/>
            </summary>
        </member>
        <member name="T:ChartControls.ParallelLineGraphics">
            <summary>
            并行线图形。
            </summary>
        </member>
        <member name="T:ChartControls.PointSnapper">
            <summary>
            坐标微调器。
            </summary>
        </member>
        <member name="M:ChartControls.PointSnapper.SnapValue(System.Double)">
            <summary>
            微调坐标值。
            </summary>
        </member>
        <member name="M:ChartControls.PointSnapper.RoundValue(System.Double)">
            <summary>
            取整坐标值。
            </summary>
        </member>
        <member name="M:ChartControls.PointSnapper.SnapPoint(System.Windows.Point)">
            <summary>
            微调坐标点。
            </summary>
        </member>
        <member name="M:ChartControls.PointSnapper.RoundPoint(System.Windows.Point)">
            <summary>
            取整坐标点。
            </summary>
        </member>
        <member name="T:ChartControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ChartControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ChartControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ChartControls.ICustomGraphics">
            <summary>
            自定义图形接口。<see cref="M:ChartControls.ChartControl.StartDrawCustomGraphics(ChartControls.ICustomGraphics)"/>
            </summary>
        </member>
        <member name="P:ChartControls.ICustomGraphics.PointCount">
            <summary>
            坐标点的数量。
            </summary>
        </member>
        <member name="P:ChartControls.ICustomGraphics.Points">
            <summary>
            坐标点数组。
            </summary>
        </member>
        <member name="P:ChartControls.ICustomGraphics.ValuePoints">
            <summary>
            时间和值组合数组。
            </summary>
        </member>
        <member name="M:ChartControls.ICustomGraphics.StartDraw(System.Windows.Point)">
            <summary>
            开始绘制第一个点。
            </summary>
            <param name="pt">坐标。</param>
        </member>
        <member name="M:ChartControls.ICustomGraphics.NextDraw(System.Windows.Point,ChartControls.Drawing.IDrawingContext,System.Boolean)">
            <summary>
            绘制下一个点。
            </summary>
            <param name="pt">坐标。</param>
            <param name="dc">绘制上下文。<see cref="T:ChartControls.Drawing.IDrawingContext"/></param>
            <param name="isFinal">是否是最后一个点。</param>
            <returns>是否绘制完成。</returns>
        </member>
        <member name="M:ChartControls.ICustomGraphics.Draw(ChartControls.Drawing.IDrawingContext)">
            <summary>
            绘制整个自定义图形。
            </summary>
            <param name="dc">绘制上下文。<see cref="T:ChartControls.Drawing.IDrawingContext"/></param>
        </member>
        <member name="T:ChartControls.ValuePoint">
            <summary>
            值时间组合，用于坐标点的对应，实现自定义图形的持久化和恢复。
            </summary>
        </member>
        <member name="P:ChartControls.ValuePoint.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="P:ChartControls.ValuePoint.Date">
            <summary>
            时间。
            </summary>
        </member>
        <member name="P:ChartControls.ValuePoint.Deviation">
            <summary>
            时间轴偏移百分比。
            </summary>
        </member>
        <member name="T:ChartControls.IPoint2ValuePoint">
            <summary>
            坐标与时间值组合转化接口。
            </summary>
        </member>
        <member name="M:ChartControls.IPoint2ValuePoint.ConvertFromPoint(System.Windows.Point)">
            <summary>
            坐标转值时间组合。
            </summary>
        </member>
        <member name="M:ChartControls.IPoint2ValuePoint.ConvertFromValuePoint(ChartControls.ValuePoint)">
            <summary>
            值时间组合转坐标。
            </summary>
        </member>
        <member name="T:ChartControls.ActionResult">
            <summary>
            请求后的操作。
            </summary>
        </member>
        <member name="T:ChartControls.QueryData">
            <summary>
            请求数据。
            </summary>
        </member>
        <member name="M:ChartControls.QueryData.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.QueryId">
            <summary>
            请求ID。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.CollectionId">
            <summary>
            数据集合ID。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.HeadDate">
            <summary>
            头部时间。不需要，可为空。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.HeadCount">
            <summary>
            头部数据项请求数量。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.TailDate">
            <summary>
            尾部时间。不需要可为空。
            </summary>
        </member>
        <member name="P:ChartControls.QueryData.TailCount">
            <summary>
            尾部数据项请求数量。
            </summary>
        </member>
        <member name="T:ChartControls.QueryItem">
            <summary>
            请求结果数据项。
            </summary>
        </member>
        <member name="T:ChartControls.QueryDataResult`1">
            <summary>
            请求结果。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.QueryId">
            <summary>
            请求ID。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.CollectionId">
            <summary>
            数据集合ID。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.IsSucceeded">
            <summary>
            请求是否成功。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.IsHeadIncluded">
            <summary>
            头部是否有数据。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.HeadItems">
            <summary>
            头部数据集合
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.IsHeadEnd">
            <summary>
            头部是否还有数据。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.IsTailIncluded">
            <summary>
            尾部是否有数据。
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.TailItems">
            <summary>
            尾部数据集合
            </summary>
        </member>
        <member name="P:ChartControls.QueryDataResult`1.IsTailEnd">
            <summary>
            尾部是否还有数据。
            </summary>
        </member>
        <member name="T:ChartControls.StockValuesItem">
            <summary>
            K线和值数据项
            </summary>
        </member>
        <member name="T:ChartControls.StockValuesItemCollection">
            <summary>
            K线和值数据集合
            </summary>
        </member>
        <member name="T:ChartControls.StockItemStyle">
            <summary>
            K线样式。
            </summary>
        </member>
        <member name="F:ChartControls.StockItemStyle.Candle">
            <summary>
            蜡烛。
            </summary>
        </member>
        <member name="F:ChartControls.StockItemStyle.America">
            <summary>
            美国线。
            </summary>
        </member>
        <member name="F:ChartControls.StockItemStyle.Linear">
            <summary>
            线性。
            </summary>
        </member>
        <member name="T:ChartControls.StockItem">
            <summary>
            k线数据项。
            </summary>
        </member>
        <member name="P:ChartControls.StockItem.High">
            <summary>
            最高价格。
            </summary>
        </member>
        <member name="P:ChartControls.StockItem.Low">
            <summary>
            最低价格。
            </summary>
        </member>
        <member name="P:ChartControls.StockItem.Open">
            <summary>
            开盘价格。
            </summary>
        </member>
        <member name="P:ChartControls.StockItem.Close">
            <summary>
            收盘价格。
            </summary>
        </member>
        <member name="P:ChartControls.StockItem.CloseChange">
            <summary>
            收盘价变动百分比。
            </summary>
        </member>
        <member name="T:ChartControls.VerticalLine">
            <summary>
            K线坐标结构。
            </summary>
        </member>
        <member name="F:ChartControls.VerticalLine.YHigh">
            <summary>
            最高点坐标。
            </summary>
        </member>
        <member name="F:ChartControls.VerticalLine.YLow">
            <summary>
            最低点坐标。
            </summary>
        </member>
        <member name="F:ChartControls.VerticalLine.YOpen">
            <summary>
            开盘点坐标。
            </summary>
        </member>
        <member name="T:ChartControls.StockItemCollection">
            <summary>
            k线数据集合。
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.HighName">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.LowName">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.CloseName">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.OpenName">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.CloseChangeName">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.StockItem},ChartControls.Drawing.IPen,ChartControls.Drawing.IPen,System.Windows.Media.Brush,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="id">集合ID。</param>
            <param name="items">数据项列表。</param>
            <param name="penRaise">上升画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"/></param>
            <param name="penFall">下降画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"/></param>
            <param name="fill">填充画刷。</param>
            <param name="isItemDynamic">是否动态加载数据集合中的数据项。缺省值是false，表示不动态加载。</param>
        </member>
        <member name="P:ChartControls.StockItemCollection.RaisePen">
            <summary>
            上升线的画笔。
            </summary>
        </member>
        <member name="P:ChartControls.StockItemCollection.FallPen">
            <summary>
            下跌线的画笔。
            </summary>
        </member>
        <member name="P:ChartControls.StockItemCollection.ItemStyle">
            <summary>
            k线样式。<see cref="T:ChartControls.StockItemStyle"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.GetItemValue(System.Int32,System.String)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetItemValue(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.GetItemPositionY(System.Int32,System.String)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetItemPositionY(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.GetItemPositionX(System.Int32,System.String)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetItemPositionX(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="F:ChartControls.StockItemCollection.verticalLines">
            <summary>
            k线坐标数组。
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.FindMaxAndMinIndex">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.FindMaxAndMinIndex"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.CalculateCollectionPoints">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CalculateCollectionPoints"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.GetMaxValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMaxValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.GetMinValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMinValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.CopyFromMaster">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyFromMaster"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.Draw(ChartControls.Drawing.IDrawingContext)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.Draw(ChartControls.Drawing.IDrawingContext)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.RearrayPointCollection(System.Int32)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.RearrayPointCollection(System.Int32)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.ConvertChartItemLog10(ChartControls.ChartItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertChartItemLog10(ChartControls.ChartItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.ConvertChartItemPow10(ChartControls.ChartItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertChartItemPow10(ChartControls.ChartItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.StockItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)"/>
            </summary>
        </member>
        <member name="M:ChartControls.StockItemCollection.ConvertFrom(ChartControls.QueryItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertFrom(ChartControls.QueryItem)"/>
            </summary>
        </member>
        <member name="T:ChartControls.SymmetricCommonSettings">
            <summary>
            时刻，时间段，交易数设置。
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.CNTimes">
            <summary>
            中国整点时刻组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.HKTimes">
            <summary>
            香港整点时刻组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.USTimes">
            <summary>
            美国整点时刻组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.CNRangeRatios">
            <summary>
            中国时间段比例组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.HKRangeRatios">
            <summary>
            香港时间段比例组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.USRangeRatios">
            <summary>
            美国时间段比例组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.CNTradingCount">
            <summary>
            中国总分钟数
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.HKTradingCount">
            <summary>
            香港总分钟数
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.USTradingCount">
            <summary>
            美国总分钟数
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricCommonSettings.Times">
            <summary>
            整点时刻组
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricCommonSettings.RangeRatios">
            <summary>
            时间段比例组
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.TradingCount">
            <summary>
            总分钟数
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.CNSettings">
            <summary>
            中国常用设置
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.CNSettings2">
            <summary>
            中国常用设置
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.HKSettings">
            <summary>
            香港常用设置
            </summary>
        </member>
        <member name="F:ChartControls.SymmetricCommonSettings.USSettings">
            <summary>
            美国常用设置
            </summary>
        </member>
        <member name="T:ChartControls.SymmetricChartItemCollection">
            <summary>
            分时图数据集合
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.ChartItem},ChartControls.Drawing.IPen,System.Windows.Media.Brush,ChartControls.SymmetricCommonSettings)">
            <summary>
            构造函数。
            </summary>
            <param name="id">集合ID。</param>
            <param name="items">数据集合列表。</param>
            <param name="pen">画笔</param>
            <param name="fill">填充颜色，暂时不用</param>
            <param name="settings">时刻，时间段，交易数设置。</param>
        </member>
        <member name="P:ChartControls.SymmetricChartItemCollection.StartValue">
            <summary>
            上一个交易日的收盘价。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricChartItemCollection.StartDate">
            <summary>
             开始时间。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricChartItemCollection.InitMax">
            <summary>
            初始最大值。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricChartItemCollection.Settings">
            <summary>
            时刻，时间段，交易数设置。 <see cref="T:ChartControls.SymmetricCommonSettings"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.GetMaxValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMaxValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.GetMinValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMinValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.GetXAxisScales">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetXAxisScales"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChartControls.SymmetricChartItemCollection.CopyFromMaster">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyFromMaster"/>
            </summary>
        </member>
        <member name="T:ChartControls.SymmetricMultipleChartItemCollection">
            <summary>
            分时图多数据集合。
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.MultipleChartItem},ChartControls.Drawing.IPen[],ChartControls.SymmetricCommonSettings)">
            <summary>
            构造函数
            </summary>
            <param name="id">集合ID。</param>
            <param name="items">数据列表。</param>
            <param name="pens">画笔数组。</param>
            <param name="settings">时刻，时间段，交易数设置。</param>
        </member>
        <member name="P:ChartControls.SymmetricMultipleChartItemCollection.StartValue">
            <summary>
            上一个交易日的收盘价。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricMultipleChartItemCollection.StartDate">
            <summary>
             开始时间。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricMultipleChartItemCollection.InitMax">
            <summary>
            初始最大值。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricMultipleChartItemCollection.Settings">
            <summary>
            时刻，时间段，交易数设置。 <see cref="T:ChartControls.SymmetricCommonSettings"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.GetMaxValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMaxValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.GetMinValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMinValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.GetXAxisScales">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetXAxisScales"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricMultipleChartItemCollection.CopyFromMaster">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyFromMaster"/>
            </summary>
        </member>
        <member name="T:ChartControls.SymmetricVolumnItemCollection">
            <summary>
            分时成交量数据集合。
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricVolumnItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.VolumnItem},ChartControls.Drawing.IPen,ChartControls.Drawing.IPen,ChartControls.SymmetricCommonSettings)">
            <summary>
            构造函数。
            </summary>
            <param name="id">集合ID。</param>
            <param name="items">数据集合列表。</param>
            <param name="penRaise">上升画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"></see></param>
            <param name="penFall">下降画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"></see></param>
            <param name="settings">时刻，时间段，交易数设置。</param>
        </member>
        <member name="P:ChartControls.SymmetricVolumnItemCollection.StartDate">
            <summary>
             开始时间。
            </summary>
        </member>
        <member name="P:ChartControls.SymmetricVolumnItemCollection.Settings">
            <summary>
            时刻，时间段，交易数设置。 <see cref="T:ChartControls.SymmetricCommonSettings"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricVolumnItemCollection.GetXAxisScales">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetXAxisScales"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChartControls.SymmetricVolumnItemCollection.CopyFromMaster">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyFromMaster"/>
            </summary>
        </member>
        <member name="M:ChartControls.SymmetricVolumnItemCollection.AddLatestChartItem(ChartControls.ChartItem)">
            <summary>
            添加最新数据
            </summary>
            <param name="latestItem">数据项</param>
            <returns>是否添加成功。</returns>
        </member>
        <member name="T:ChartControls.VolumnItemStyle">
            <summary>
            成交量图表样式。
            </summary>
        </member>
        <member name="F:ChartControls.VolumnItemStyle.Fat">
            <summary>
            条。
            </summary>
        </member>
        <member name="F:ChartControls.VolumnItemStyle.Slim">
            <summary>
            竖线。
            </summary>
        </member>
        <member name="F:ChartControls.VolumnItemStyle.Linear">
            <summary>
            曲线。
            </summary>
        </member>
        <member name="T:ChartControls.VolumnItem">
            <summary>
            成交量数据项。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItem.Volumn">
            <summary>
            成交量。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItem.Turnover">
            <summary>
            成交额。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItem.ExchangeRate">
            <summary>
            换手率。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItem.IsRaise">
            <summary>
            是否上升。
            </summary>
        </member>
        <member name="T:ChartControls.VolumnItemCollection">
            <summary>
            成交量数据集合。
            </summary>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.#ctor(ChartControls.CollectionId,System.Collections.Generic.IEnumerable{ChartControls.VolumnItem},ChartControls.Drawing.IPen,ChartControls.Drawing.IPen,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="id">集合ID。</param>
            <param name="items">数据集合列表。</param>
            <param name="penRaise">上升画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"></see></param>
            <param name="penFall">下降画笔。<see cref="M:ChartControls.Drawing.DrawingObjectFactory.CreatePen(System.Windows.Media.Brush,System.Double)"></see></param>
            <param name="isItemDynamic">是否动态加载数据集合中的数据项。缺省值是false，表示不动态加载。</param>
        </member>
        <member name="P:ChartControls.VolumnItemCollection.RaisePen">
            <summary>
            上升线的画笔。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItemCollection.FallPen">
            <summary>
            下跌线的画笔。
            </summary>
        </member>
        <member name="P:ChartControls.VolumnItemCollection.VolumnItemStyle">
            <summary>
            成交量图表样式。
            </summary>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.Draw(ChartControls.Drawing.IDrawingContext)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.Draw(ChartControls.Drawing.IDrawingContext)"/>
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.GetMinValue">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetMinValue"/>
            </summary>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.CopyAndAdjustItemValue(ChartControls.ChartItem,ChartControls.CoordinateType)"/>
            </summary>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.ConvertFrom(ChartControls.QueryItem)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.ConvertFrom(ChartControls.QueryItem)"/>
            </summary>
        </member>
        <member name="M:ChartControls.VolumnItemCollection.GetYAxisScales(ChartControls.CoordinateType)">
            <summary>
            <see cref="M:ChartControls.ChartItemCollection.GetYAxisScales(ChartControls.CoordinateType)"/>
            </summary>
        </member>
    </members>
</doc>
